{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://vim-google-docs-extension/./src/commands.ts","webpack://vim-google-docs-extension/./src/state.ts","webpack://vim-google-docs-extension/webpack/bootstrap","webpack://vim-google-docs-extension/webpack/runtime/define property getters","webpack://vim-google-docs-extension/webpack/runtime/hasOwnProperty shorthand","webpack://vim-google-docs-extension/webpack/runtime/make namespace object","webpack://vim-google-docs-extension/./src/content.ts"],"sourcesContent":["import { VimState, Mode } from \"./state\";\n\n// Add clipboard state to VimState\ndeclare module \"./state\" {\n  interface VimState {\n    clipboard: string;\n    setClipboard(text: string): void;\n    getClipboard(): string;\n  }\n}\n\nexport function handleCommand(key: string, state: VimState) {\n  if (state.isInCommandMode()) {\n    handleCommandMode(key, state);\n  } else if (state.isInInsertMode()) {\n    handleInsertMode(key, state);\n  } else if (state.isInVisualMode()) {\n    handleVisualMode(key, state);\n  }\n}\n\nfunction handleCommandMode(key: string, state: VimState) {\n  switch (key) {\n    case \"i\":\n      state.setMode(Mode.INSERT);\n      break;\n    case \"v\":\n      state.setMode(Mode.VISUAL);\n      break;\n    case \"h\":\n      moveCursorLeft();\n      break;\n    case \"j\":\n      moveCursorDown();\n      break;\n    case \"k\":\n      moveCursorUp();\n      break;\n    case \"l\":\n      moveCursorRight();\n      break;\n    case \"d\":\n      if (state.isInVisualMode()) {\n        deleteSelectedText(state);\n      } else {\n        deleteCurrentLine();\n      }\n      break;\n    case \"y\":\n      yankText(state);\n      break;\n    case \"p\":\n      pasteText(state);\n      break;\n    case \"0\":\n      moveCursorToLineStart();\n      break;\n    case \"$\":\n      moveCursorToLineEnd();\n      break;\n    default:\n      console.log(`Unrecognized command: ${key}`);\n      break;\n  }\n}\n\nfunction handleInsertMode(key: string, state: VimState) {\n  if (key === \"Escape\" || key === \"Esc\") {\n    state.setMode(Mode.COMMAND);\n  }\n}\n\nfunction handleVisualMode(key: string, state: VimState) {\n  if (key === \"Escape\" || key === \"Esc\") {\n    state.setMode(Mode.COMMAND);\n    clearSelection();\n  } else {\n    switch (key) {\n      case \"h\":\n        extendSelectionLeft();\n        break;\n      case \"j\":\n        extendSelectionDown();\n        break;\n      case \"k\":\n        extendSelectionUp();\n        break;\n      case \"l\":\n        extendSelectionRight();\n        break;\n      case \"y\":\n        yankText(state);\n        state.setMode(Mode.COMMAND);\n        break;\n      case \"d\":\n        deleteSelectedText(state);\n        state.setMode(Mode.COMMAND);\n        break;\n    }\n  }\n}\n\nfunction yankText(state: VimState) {\n  const selection = window.getSelection();\n  if (selection && selection.toString()) {\n    state.setClipboard(selection.toString());\n    clearSelection();\n  } else {\n    // If no selection, yank current line\n    simulateKeyPressWithModifiers([\"Control\", \"Shift\"], \"ArrowLeft\");\n    const lineSelection = window.getSelection();\n    if (lineSelection) {\n      state.setClipboard(lineSelection.toString());\n      clearSelection();\n    }\n  }\n}\n\nfunction pasteText(state: VimState) {\n  const clipboardText = state.getClipboard();\n  if (clipboardText) {\n    // Use the browser's clipboard API to paste text\n    navigator.clipboard.writeText(clipboardText).then(() => {\n      simulateKeyPressWithModifiers([\"Control\"], \"v\");\n    });\n  }\n}\n\nfunction deleteSelectedText(state: VimState) {\n  const selection = window.getSelection();\n  if (selection && selection.toString()) {\n    state.setClipboard(selection.toString()); // Save to clipboard before deleting\n    simulateKeyPress(\"Delete\");\n  }\n}\n\nfunction clearSelection() {\n  window.getSelection()?.removeAllRanges();\n}\n\nfunction extendSelectionLeft() {\n  simulateKeyPressWithModifiers([\"Shift\"], \"ArrowLeft\");\n}\n\nfunction extendSelectionRight() {\n  simulateKeyPressWithModifiers([\"Shift\"], \"ArrowRight\");\n}\n\nfunction extendSelectionUp() {\n  simulateKeyPressWithModifiers([\"Shift\"], \"ArrowUp\");\n}\n\nfunction extendSelectionDown() {\n  simulateKeyPressWithModifiers([\"Shift\"], \"ArrowDown\");\n}\n\nfunction moveCursorToLineStart() {\n  simulateKeyPress(\"Home\");\n}\n\nfunction moveCursorToLineEnd() {\n  simulateKeyPress(\"End\");\n}\n\n// Existing movement and utility functions remain the same\nfunction moveCursorLeft() {\n  simulateKeyPress(\"ArrowLeft\");\n}\n\nfunction moveCursorRight() {\n  simulateKeyPress(\"ArrowRight\");\n}\n\nfunction moveCursorUp() {\n  simulateKeyPress(\"ArrowUp\");\n}\n\nfunction moveCursorDown() {\n  simulateKeyPress(\"ArrowDown\");\n}\n\nfunction deleteCurrentLine() {\n  simulateKeyPressWithModifiers([\"Control\", \"Shift\"], \"ArrowLeft\");\n  simulateKeyPress(\"Backspace\");\n}\n\nfunction simulateKeyPress(key: string) {\n  const event = new KeyboardEvent(\"keydown\", {\n    key: key,\n    bubbles: true,\n    cancelable: true,\n  });\n  document.dispatchEvent(event);\n}\n\nfunction simulateKeyPressWithModifiers(modifiers: string[], key: string) {\n  const eventInit: KeyboardEventInit = {\n    key: key,\n    bubbles: true,\n    cancelable: true,\n    shiftKey: modifiers.includes(\"Shift\"),\n    ctrlKey: modifiers.includes(\"Control\"),\n    altKey: modifiers.includes(\"Alt\"),\n    metaKey: modifiers.includes(\"Meta\"),\n  };\n  const event = new KeyboardEvent(\"keydown\", eventInit);\n  document.dispatchEvent(event);\n}\n","export enum Mode {\n  OFF = \"OFF\",\n  COMMAND = \"COMMAND\",\n  INSERT = \"INSERT\",\n  VISUAL = \"VISUAL\",\n}\n\nexport class VimState {\n  private _mode: Mode = Mode.OFF;\n  private _clipboard: string = \"\";\n\n  setMode(newMode: Mode) {\n    this._mode = newMode;\n    console.log(`Switched to ${newMode} mode.`);\n    this.updateStatusBar();\n  }\n\n  get mode(): Mode {\n    return this._mode;\n  }\n\n  isInOffMode(): boolean {\n    return this._mode === Mode.OFF;\n  }\n\n  isInInsertMode(): boolean {\n    return this._mode === Mode.INSERT;\n  }\n\n  isInCommandMode(): boolean {\n    return this._mode === Mode.COMMAND;\n  }\n\n  isInVisualMode(): boolean {\n    return this._mode === Mode.VISUAL;\n  }\n\n  setClipboard(text: string) {\n    this._clipboard = text;\n  }\n\n  getClipboard(): string {\n    return this._clipboard;\n  }\n\n  private updateStatusBar() {\n    const statusBar = document.getElementById(\"vim-status-bar\");\n    if (statusBar) {\n      statusBar.textContent = `MODE: ${this._mode}`;\n    }\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { VimState, Mode } from \"./state\";\nimport { handleCommand } from \"./commands\";\n\n// Initialize Vim state\nconst state = new VimState();\n\n// Create the status bar element\nlet statusBar: HTMLDivElement | null = null;\n\n\n// Function to handle the state update based on mode\nfunction setMode(mode: Mode) {\n  state.setMode(mode);\n  \n  // Create the status bar only if it doesn't exist\n  if (!statusBar) {\n    statusBar = document.createElement(\"div\");\n    statusBar.id = \"vim-status-bar\";\n    statusBar.style.position = \"fixed\";\n    statusBar.style.bottom = \"0\";\n    statusBar.style.left = \"0\";\n    statusBar.style.width = \"100%\";\n    statusBar.style.height = \"20px\";\n    statusBar.style.backgroundColor = \"#2e3436\";\n    statusBar.style.color = \"#ffffff\";\n    statusBar.style.fontFamily = \"monospace\";\n    statusBar.style.fontSize = \"12px\";\n    statusBar.style.textAlign = \"center\";\n    statusBar.style.zIndex = \"9999\";\n    document.body.appendChild(statusBar);\n  }\n\n  // Show or hide the status bar based on mode\n  if (statusBar) {\n    if (mode === Mode.COMMAND) {\n      statusBar.textContent = `MODE: ${state.mode}`;\n      statusBar.style.display = \"block\"; // Show status bar when in COMMAND mode\n    } else {\n      statusBar.style.display = \"none\"; // Hide status bar when in OFF mode\n    }\n  }\n}\n\n// Add message listener for toggling the command mode\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.type === \"toggleCommandMode\") {\n    const isEnabled = message.enabled;\n    if (isEnabled) {\n      setMode(Mode.COMMAND); // Set to COMMAND mode\n    } else {\n      setMode(Mode.OFF); // Set to OFF mode\n    }\n  }\n});\n\n// Initialize the extension\nfunction init() {\n  // Ensure the DOM is ready before proceeding\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", onDomContentLoaded);\n  } else {\n    onDomContentLoaded();\n  }\n}\n\n// Fallback when DOM is loaded\nfunction onDomContentLoaded() {\n  setMode(Mode.OFF); // Set to OFF by default\n  document.addEventListener(\"keydown\", (event) => {\n    const activeElement = document.activeElement as HTMLElement;\n\n    // If in Insert mode and focused on input fields, do not intercept\n    if (\n      state.isInInsertMode() &&\n      (activeElement.tagName === \"INPUT\" ||\n        activeElement.tagName === \"TEXTAREA\" ||\n        activeElement.isContentEditable)\n    ) {\n      return;\n    }\n\n    // Prevent default behavior for intercepted keys\n    const interceptedKeys = [\n      \"h\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"i\",\n      \"v\",\n      \"d\",\n      \"y\",\n      \"p\",\n      \"Escape\",\n      \"Esc\",\n    ];\n    if (interceptedKeys.includes(event.key)) {\n      event.preventDefault();\n      handleCommand(event.key, state);\n    }\n  });\n}\n\n// Wait for the DOM to load before initializing\ninit();\n"],"names":[],"sourceRoot":""}